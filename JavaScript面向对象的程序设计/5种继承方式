
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Document</title>
	<style type="text/css">
		
	</style>
</head>
<body>

	<script type="text/javascript">
  
  5种继承方式，来自http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_encapsulation.html
	
	// function Animate(){
	// 	this.species = "动物";
	// }


// 1、构造函数绑定
/*
	function Cat(name,color){
		Animate.call(this,arguments);
		this.name = name;
		this.color = color;
	}

	var xiaomi = new Cat('xiaomi','black');
	console.log(xiaomi.name);
	console.log(xiaomi.species);
*/


// 2、prototype模式
/*
	function Cat(name,color){
		this.name = name;
		this.color = color;
	}

	Cat.prototype = new Animate();

	var xiaomi = new Cat('xiaomi','black');
	console.log(Cat.prototype.constructor == Animate); //true
	console.log(xiaomi.constructor == Animate); //true
// 这样就存在一个问题，就是继承链混乱，xiaomi的构造函数成了Animate,本来应该是Cat。应该用一下的方法
	function Cat(name,color){
		this.name = name;
		this.color = color;
	}

	Cat.prototype = new Animate();
	Cat.prototype.constructor = Cat;

	var xiaomi = new Cat('xiaomi','black');
	console.log(Cat.prototype.constructor == Animate); //false
	console.log(Cat.prototype.constructor == Cat); //true
	console.log(xiaomi.constructor == Animate); //false
	console.log(xiaomi.constructor == Cat); //true
*/


// 3、直接继承prototype
/*
//可以将Animate不变的属性写到prorotype中，所以，继承就可以跳过Animate的实例，直接继承Animate的prototype
	function Animate(){};
	Animate.prototype.species = "动物";

	function Cat(name,color){
		this.name = name;
		this.color = color;
	}

	Cat.prototype = Animate.prototype;
	Cat.prototype.constructor = Cat;

	var xiaomi = new Cat('xiaomi','black');
	console.log(Cat.prototype.constructor == Animate); //false
	console.log(Cat.prototype.constructor == Cat); //true
//但是注意，这样会存在一个问题，就是Cat.prototype.constructor = Cat;也会改写Animate的constructor
	console.log(Animate.prototype.constructor == Cat); //true
*/


// 4、利用空对象作为中介
/*
	function Animate(){};
	Animate.prototype.species = "动物";

	var F = function(){};
	F.prototype = Animate.prototype;

	function Cat(name,color){
		this.name = name;
		this.color = color;
	}

	Cat.prototype = new F();
	Cat.prototype.constructor = Cat();

	var xiaomi = new Cat('xiaomi','black');
	console.log(xiaomi.species);
	console.log(F.prototype.constructor == Animate); //true

//注意：这个不会修改Animate的prototype
//可以将它封装为一个函数
	　　function extend(Child, Parent) {

	　　　　var F = function(){};
	　　　　F.prototype = Parent.prototype;
	　　　　Child.prototype = new F();
	　　　　Child.prototype.constructor = Child;
	　　　　Child.uber = Parent.prototype;
	　　}

//使用方法
	function Animate(){};
	Animate.prototype.species = "动物";

	function Cat(name,color){
		this.name = name;
		this.color = color;
	}

	extend(Cat,Animate);

	var xiaomi = new Cat('xiaomi','black');

	console.log(xiaomi.species);
//注意：Child.uber = Parent.prototype;是为了能使child能够访问到animate的原型，应为进过这个函数，child.prototype绑定到了F上，所以要想访问到Animate的原型，就得添加一个属性
*/

// 5、拷贝继承
/*
	function extend2(child,parent){
		var c = child.prototype;
		var p = parent.prototype;
		for(var i in p){
			c[i] = p[i];
		}
		c.uber = p;
	}

//使用方法
	function Animate(){};
	Animate.prototype.species = "动物";

	function Cat(name,color){
		this.name = name;
		this.color = color;
	}

	extend2(Cat,Animate);

	var xiaomi = new Cat('xiaomi','black');

	console.log(xiaomi.species); //动物

*/
	</script>
</body>
</html>
